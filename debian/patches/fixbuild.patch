Description: Fix build
 first, libcares is built with autotools in debian, make an ugly fallback to
 just using the library
 .
 also gprc uses a method has_php_namespace, which is only defined since
 libprotobuf 3.4.0.
 .
 grpc (1.10-0.1) unstable; urgency=medium
 .
   * New upstream release.
Author: Norbert Lange <nolange79@gmail.com>

--- grpc-1.10.orig/cmake/cares.cmake
+++ grpc-1.10/cmake/cares.cmake
@@ -31,10 +31,15 @@ if("${gRPC_CARES_PROVIDER}" STREQUAL "mo
   endif()
 elseif("${gRPC_CARES_PROVIDER}" STREQUAL "package")
   # Use "CONFIG" as there is no built-in cmake module for c-ares.
-  find_package(c-ares REQUIRED CONFIG)
-  if(TARGET c-ares::cares)
-    set(_gRPC_CARES_LIBRARIES c-ares::cares)
-    set(_gRPC_CARES_INCLUDE_DIR ${c-ares_INCLUDE_DIR})
+  find_package(c-ares CONFIG)
+  if (NOT c-ares_FOUND)
+    set(_gRPC_CARES_LIBRARIES -lcares)
+    set(_gRPC_FIND_CARES "set(_gRPC_CARES_LIBRARIES -lcares)")
+  else()
+    if(TARGET c-ares::cares)
+      set(_gRPC_CARES_LIBRARIES c-ares::cares)
+      set(_gRPC_CARES_INCLUDE_DIR ${c-ares_INCLUDE_DIR})
+    endif()
+    set(_gRPC_FIND_CARES "if(NOT c-ares_FOUND)\n  find_package(c-ares CONFIG)\nendif()")
   endif()
-  set(_gRPC_FIND_CARES "if(NOT c-ares_FOUND)\n  find_package(c-ares CONFIG)\nendif()")
 endif()
--- grpc-1.10.orig/src/compiler/php_generator.cc
+++ grpc-1.10/src/compiler/php_generator.cc
@@ -44,9 +44,13 @@ grpc::string ConvertToPhpNamespace(const
 }
 
 grpc::string PackageName(const FileDescriptor* file) {
+#if GOOGLE_PROTOBUF_VERSION >= 3004000
   if (file->options().has_php_namespace()) {
     return file->options().php_namespace();
   } else {
+#else
+{
+#endif
     return ConvertToPhpNamespace(file->package());
   }
 }
--- grpc-1.10.orig/src/compiler/php_generator_helpers.h
+++ grpc-1.10/src/compiler/php_generator_helpers.h
@@ -48,9 +48,13 @@ inline grpc::string GetPHPServiceFilenam
     const grpc::protobuf::ServiceDescriptor* service,
     const grpc::string& class_suffix) {
   std::ostringstream oss;
+#if GOOGLE_PROTOBUF_VERSION >= 3004000
   if (file->options().has_php_namespace()) {
     oss << ReplaceAll(file->options().php_namespace(), "\\", "/");
   } else {
+#else
+  {
+#endif
     std::vector<grpc::string> tokens =
         grpc_generator::tokenize(file->package(), ".");
     for (unsigned int i = 0; i < tokens.size(); i++) {
